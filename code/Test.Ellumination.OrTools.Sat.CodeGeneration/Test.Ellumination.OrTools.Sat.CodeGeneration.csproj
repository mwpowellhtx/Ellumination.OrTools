<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFramework>netcoreapp2.1</TargetFramework>
        <Version>1.0.0.34</Version>
        <AssemblyVersion>1.0.0.34</AssemblyVersion>
        <FileVersion>1.0.0.34</FileVersion>
        <!--<ReleaseVersionStrategy>patch</ReleaseVersionStrategy>-->
        <Configurations>Debug</Configurations>
    </PropertyGroup>

    <ImportGroup>
        <Import Project="..\..\Dotnet.Unit.Testing.props" />
    </ImportGroup>

    <ItemGroup>
        <None Remove="Ellumination.OrTools.Sat.CodeGeneration.Tests.csproj.DotSettings" />
    </ItemGroup>

    <!-- ReSharper disable UnknownProperty -->
    <ItemGroup>
        <PackageReference Include="Google.OrTools" Version="$(GoogleOrToolsVersions)" PrivateAssets="all" />
        <PackageReference Include="Microsoft.Build" Version="$(MicrosoftBuildVersions)" />
        <PackageReference Include="Microsoft.Build.Framework" Version="$(MicrosoftBuildVersions)" />
        <PackageReference Include="Microsoft.CodeAnalysis" Version="$(MicrosoftCodeAnalysisVersions)" />
        <PackageReference Include="Microsoft.CodeAnalysis.CSharp.Workspaces" Version="$(MicrosoftCodeAnalysisVersions)" />
        <PackageReference Include="Microsoft.CodeAnalysis.Workspaces.Common" Version="$(MicrosoftCodeAnalysisVersions)" />
        <PackageReference Include="Microsoft.CodeAnalysis.Workspaces.MSBuild" Version="$(MicrosoftCodeAnalysisVersions)" />
        <PackageReference Include="xunit" Version="$(XunitVersion)" />
        <PackageReference Include="xunit.fluently.assert" Version="[1.3,3)" />
        <PackageReference Include="xunit.fluently.assert.ioly" Version="[1.2,2]" />
        <PackageReference Include="xunit.fluently.assert.exceptionally" Version="[1,2]" />
        <PackageReference Include="xunit.runner.console" Version="$(XunitVersion)">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
        </PackageReference>
        <PackageReference Include="xunit.runner.visualstudio" Version="$(XunitVersion)">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
        </PackageReference>
    </ItemGroup>
    <!-- ReSharper restore UnknownProperty -->

    <ItemGroup>
        <ProjectReference Include="..\Ellumination.OrTools.Sat.CodeGeneration.Core\Ellumination.OrTools.Sat.CodeGeneration.Core.csproj" />
    </ItemGroup>

    <!-- ReSharper disable UnknownProperty -->
    <ItemGroup>
        <Folder Include="Resources\" />
        <!-- This can now depend upon the Embedded Protocol Buffer Content derived from
         the NuGet Package sources. This happened circa Google.OrTools version 7.3.7083.
         https://www.nuget.org/packages/Google.OrTools/7.3.7083
         Package the .proto files with the NuGet package / https://github.com/google/or-tools/issues/1190
         It is probably fine to leave the Package Dependency on a Greater Than Or Equal To (>=)
         track. As long as the Parameters do not change, then it is fine. Should they change at
         all, then we need to rebuild and redeploy this package, which is fine. Otherwise the
         migration path should be transparent. -->
        <!-- TODO: TBD: can we leverage an Items/FileName approach at all?
         i.e. ..\packages\google.ortools\**\content\sat\sat_parameters.proto (?)
         the only problem being what we do with previous versions? -->
        <EmbeddedResource Include="..\packages\google.ortools\$(GoogleOrToolsVersion)\content\sat\sat_parameters.proto" Link="Resources\sat_parameters.proto" />
    </ItemGroup>
    <!-- ReSharper restore UnknownProperty -->

</Project>
